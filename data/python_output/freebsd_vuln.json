{
  "errors": [
    {
      "filename": "freebsd\\cddl\\contrib\\opensolaris\\cmd\\pyzfs\\pyzfs.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\dataset.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\cortex-strings\\scripts\\bench.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\cortex-strings\\scripts\\plot.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\dialog\\samples\\dialog.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\fuse_gmock_files.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\upload.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googletest\\scripts\\gen_gtest_pred_impl.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googletest\\scripts\\pump.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googletest\\scripts\\release_docs.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googletest\\scripts\\upload.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\googletest-env-var-test.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\googletest-throw-on-failure-test.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\googletest-uninitialized-test.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_xml_output_unittest.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\googletest\\googletest\\xcode\\Scripts\\versiongenerate.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\libevent\\event_rpcgen.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\ntp\\sntp\\libevent\\event_rpcgen.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\serf\\build\\check.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\dbus-listen-preq.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p-nfc.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\wps-nfc.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\crypto\\heimdal\\lib\\hx509\\quote.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\crypto\\heimdal\\lib\\wind\\UnicodeData.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\crypto\\heimdal\\lib\\wind\\gen-bidi.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\crypto\\heimdal\\lib\\wind\\gen-combining.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\crypto\\heimdal\\lib\\wind\\gen-errorlist.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\crypto\\heimdal\\lib\\wind\\gen-map.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\crypto\\heimdal\\lib\\wind\\gen-normalize.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\crypto\\heimdal\\lib\\wind\\gen-punycode-examples.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\tests\\sys\\cddl\\zfs\\tests\\txg_integrity\\make_patterns.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "freebsd\\tests\\sys\\geom\\class\\eli\\gentestvect.py",
      "reason": "syntax error while parsing AST from file"
    }
  ],
  "generated_at": "2020-12-11T15:58:38Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 256.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 12.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 11.0,
      "SEVERITY.LOW": 249.0,
      "SEVERITY.MEDIUM": 8.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 40987,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\cmd\\pyzfs\\pyzfs.py": {
      "loc": 36,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 3,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\allow.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 304,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\dataset.py": {
      "loc": 166,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\groupspace.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 2,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\holds.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 42,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\table.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 38,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\unallow.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 2,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\userspace.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 173,
      "nosec": 0
    },
    "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\util.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 92,
      "nosec": 0
    },
    "freebsd\\contrib\\bc\\karatsuba.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 5.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 143,
      "nosec": 0
    },
    "freebsd\\contrib\\bc\\tests\\afl.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 105,
      "nosec": 0
    },
    "freebsd\\contrib\\bc\\tests\\randmath.py": {
      "CONFIDENCE.HIGH": 11.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 1.0,
      "SEVERITY.LOW": 10.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 198,
      "nosec": 0
    },
    "freebsd\\contrib\\bmake\\mk\\meta2deps.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 626,
      "nosec": 0
    },
    "freebsd\\contrib\\cortex-strings\\scripts\\bench.py": {
      "loc": 124,
      "nosec": 0
    },
    "freebsd\\contrib\\cortex-strings\\scripts\\fixup.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 21,
      "nosec": 0
    },
    "freebsd\\contrib\\cortex-strings\\scripts\\libplot.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 57,
      "nosec": 0
    },
    "freebsd\\contrib\\cortex-strings\\scripts\\plot-align.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 46,
      "nosec": 0
    },
    "freebsd\\contrib\\cortex-strings\\scripts\\plot-sizes.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 91,
      "nosec": 0
    },
    "freebsd\\contrib\\cortex-strings\\scripts\\plot-top.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 41,
      "nosec": 0
    },
    "freebsd\\contrib\\cortex-strings\\scripts\\plot.py": {
      "loc": 83,
      "nosec": 0
    },
    "freebsd\\contrib\\dialog\\samples\\dialog.py": {
      "loc": 232,
      "nosec": 0
    },
    "freebsd\\contrib\\expat\\tests\\udiffer.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 24,
      "nosec": 0
    },
    "freebsd\\contrib\\expat\\xmlwf\\xmlwf_helpgen.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 31,
      "nosec": 0
    },
    "freebsd\\contrib\\file\\python\\example.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 11,
      "nosec": 0
    },
    "freebsd\\contrib\\file\\python\\magic.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 221,
      "nosec": 0
    },
    "freebsd\\contrib\\file\\python\\setup.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 21,
      "nosec": 0
    },
    "freebsd\\contrib\\file\\python\\tests.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 22,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\fuse_gmock_files.py": {
      "loc": 128,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 0,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py": {
      "CONFIDENCE.HIGH": 52.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 52.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1284,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\gmock_class.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 145,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\gmock_class_test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 389,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\keywords.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 24,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\tokenize.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 195,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\utils.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 16,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\gmock_gen.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 9,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\gmock_doctor.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 508,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\upload.py": {
      "loc": 1132,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\scripts\\upload_gmock.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 1.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 30,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\test\\gmock_leak_test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 55,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\test\\gmock_output_test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 93,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googlemock\\test\\gmock_test_utils.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 44,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\scripts\\common.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 1.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 31,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\scripts\\fuse_gtest_files.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 137,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\scripts\\gen_gtest_pred_impl.py": {
      "loc": 518,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\scripts\\pump.py": {
      "loc": 644,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\scripts\\release_docs.py": {
      "loc": 87,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\scripts\\upload.py": {
      "loc": 1132,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\scripts\\upload_gtest.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 1.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 30,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-break-on-failure-unittest.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 122,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-catch-exceptions-test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 155,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-color-test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 72,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-env-var-test.py": {
      "loc": 59,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-filter-unittest.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 2.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 405,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-json-outfiles-test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 108,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-json-output-unittest.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 536,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-list-tests-unittest.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 133,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-output-test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 216,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-param-test-invalid-name1-test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 18,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-param-test-invalid-name2-test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 18,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-shuffle-test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 212,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-throw-on-failure-test.py": {
      "loc": 95,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\googletest-uninitialized-test.py": {
      "loc": 22,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\gtest_help_test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 102,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\gtest_json_test_utils.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 26,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\gtest_list_output_unittest.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 94,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\gtest_test_utils.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 2.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 173,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\gtest_testbridge_test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 21,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\gtest_xml_outfiles_test.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 3.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 85,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\gtest_xml_output_unittest.py": {
      "loc": 302,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\test\\gtest_xml_test_utils.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 148,
      "nosec": 0
    },
    "freebsd\\contrib\\googletest\\googletest\\xcode\\Scripts\\versiongenerate.py": {
      "loc": 47,
      "nosec": 0
    },
    "freebsd\\contrib\\lib9p\\pytest\\client.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 540,
      "nosec": 0
    },
    "freebsd\\contrib\\lib9p\\pytest\\lerrno.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 282,
      "nosec": 0
    },
    "freebsd\\contrib\\lib9p\\pytest\\numalloc.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 290,
      "nosec": 0
    },
    "freebsd\\contrib\\lib9p\\pytest\\p9conn.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1434,
      "nosec": 0
    },
    "freebsd\\contrib\\lib9p\\pytest\\p9err.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 117,
      "nosec": 0
    },
    "freebsd\\contrib\\lib9p\\pytest\\pfod.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 2.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 161,
      "nosec": 0
    },
    "freebsd\\contrib\\lib9p\\pytest\\protocol.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1433,
      "nosec": 0
    },
    "freebsd\\contrib\\lib9p\\pytest\\sequencer.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 5.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 534,
      "nosec": 0
    },
    "freebsd\\contrib\\libevent\\event_rpcgen.py": {
      "loc": 1355,
      "nosec": 0
    },
    "freebsd\\contrib\\libevent\\test\\check-dumpevents.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 39,
      "nosec": 0
    },
    "freebsd\\contrib\\libucl\\python\\setup.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 38,
      "nosec": 0
    },
    "freebsd\\contrib\\libucl\\python\\tests\\__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 0,
      "nosec": 0
    },
    "freebsd\\contrib\\libucl\\python\\tests\\compat.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 6,
      "nosec": 0
    },
    "freebsd\\contrib\\libucl\\python\\tests\\test_dump.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 54,
      "nosec": 0
    },
    "freebsd\\contrib\\libucl\\python\\tests\\test_load.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 89,
      "nosec": 0
    },
    "freebsd\\contrib\\libucl\\python\\tests\\test_validation.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 40,
      "nosec": 0
    },
    "freebsd\\contrib\\libxo\\doc\\conf.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 1.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 48,
      "nosec": 0
    },
    "freebsd\\contrib\\llvm-project\\lld\\docs\\conf.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 39,
      "nosec": 0
    },
    "freebsd\\contrib\\llvm-project\\lldb\\bindings\\python\\createPythonInit.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 13,
      "nosec": 0
    },
    "freebsd\\contrib\\llvm-project\\lldb\\source\\Interpreter\\embedded_interpreter.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 103,
      "nosec": 0
    },
    "freebsd\\contrib\\ntp\\sntp\\libevent\\event_rpcgen.py": {
      "loc": 1355,
      "nosec": 0
    },
    "freebsd\\contrib\\ntp\\sntp\\libevent\\test\\check-dumpevents.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 39,
      "nosec": 0
    },
    "freebsd\\contrib\\ntp\\sntp\\unity\\auto\\unity_test_summary.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 104,
      "nosec": 0
    },
    "freebsd\\contrib\\serf\\build\\check.py": {
      "loc": 34,
      "nosec": 0
    },
    "freebsd\\contrib\\serf\\build\\gen_def.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 26,
      "nosec": 0
    },
    "freebsd\\contrib\\subversion\\.ycm_extra_conf.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 47,
      "nosec": 0
    },
    "freebsd\\contrib\\subversion\\gen-make.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 266,
      "nosec": 0
    },
    "freebsd\\contrib\\subversion\\subversion\\libsvn_subr\\genctype.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 60,
      "nosec": 0
    },
    "freebsd\\contrib\\subversion\\win-tests.py": {
      "CONFIDENCE.HIGH": 11.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 9.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 20.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1137,
      "nosec": 0
    },
    "freebsd\\contrib\\unbound\\contrib\\unbound-querycachedb.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 68,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\hostapd\\wps-ap-nfc.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 270,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\eapol_test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 117,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\dbus-listen-preq.py": {
      "loc": 49,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\dpp-qrcode.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 110,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p-nfc.py": {
      "loc": 552,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_connect.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 213,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_disconnect.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 114,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_find.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 130,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_flush.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 112,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_group_add.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 161,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_invite.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 147,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_listen.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 123,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_stop_find.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 119,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\wpas-dbus-new-getall.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 48,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\wpas-dbus-new-signals.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 167,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\wpas-dbus-new-wps.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 62,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\wpas-dbus-new.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 120,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\wps-nfc.py": {
      "loc": 428,
      "nosec": 0
    },
    "freebsd\\contrib\\wpa\\wpa_supplicant\\utils\\log2pcap.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 37,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\hx509\\quote.py": {
      "loc": 54,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\UnicodeData.py": {
      "loc": 20,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\gen-bidi.py": {
      "loc": 48,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\gen-combining.py": {
      "loc": 42,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\gen-errorlist.py": {
      "loc": 60,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\gen-map.py": {
      "loc": 91,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\gen-normalize.py": {
      "loc": 128,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\gen-punycode-examples.py": {
      "loc": 72,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\generate.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 37,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\rfc3454.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 23,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\rfc4518.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 66,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\stringprep.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 49,
      "nosec": 0
    },
    "freebsd\\crypto\\heimdal\\lib\\wind\\util.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 11,
      "nosec": 0
    },
    "freebsd\\release\\scripts\\list-new-changesets.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 3.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 55,
      "nosec": 0
    },
    "freebsd\\share\\mk\\meta2deps.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 614,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\libsodium\\packaging\\dotnet-core\\prepare.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 193,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\libsodium\\regen-msvc\\regen-msvc.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 111,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\docs\\source\\conf.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 43,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 129,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\_constants.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 77,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\_error_translation.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 700,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\_libzfs_core.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1627,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\_nvlist.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 241,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\bindings\\__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 31,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\bindings\\libnvpair.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 104,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\bindings\\libzfs_core.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 113,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\ctypes.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 41,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\exceptions.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 366,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 0,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py": {
      "CONFIDENCE.HIGH": 33.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 33.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 3411,
      "nosec": 0
    },
    "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_nvlist.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 502,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\cddl\\zfs\\tests\\txg_integrity\\make_patterns.py": {
      "loc": 38,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\common\\divert.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 34,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\common\\net_receiver.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 75,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\common\\sender.py": {
      "CONFIDENCE.HIGH": 17.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 17.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 134,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\geom\\class\\eli\\gentestvect.py": {
      "loc": 48,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\kern\\sonewconn_overflow.py": {
      "CONFIDENCE.HIGH": 6.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 6.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 112,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\exthdr.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 184,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_01.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 57,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_02.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 56,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_03.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 69,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_04.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 53,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_05.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 40,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_06.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 38,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_07.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 99,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_08.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 87,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_09.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 54,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_10.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 35,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_11.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 35,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_12.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 56,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_13.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 63,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_14.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 80,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_15.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 49,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_16.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 75,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_17.py": {
      "CONFIDENCE.HIGH": 3.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 3.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 43,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_18.py": {
      "CONFIDENCE.HIGH": 3.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 3.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 43,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_19.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 38,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_20.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 77,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\frag6\\sniffer.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 31,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\mld.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 41,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\redirect.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 43,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet6\\scapyi386.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 42,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netinet\\redirect.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 44,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netpfil\\common\\pft_ping.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 101,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netpfil\\common\\sniffer.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 18,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netpfil\\pf\\CVE-2019-5597.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 26,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\netpfil\\pf\\CVE-2019-5598.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 49,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\opencrypto\\cryptodev.py": {
      "CONFIDENCE.HIGH": 18.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 18.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 545,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\opencrypto\\cryptodevh.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 219,
      "nosec": 0
    },
    "freebsd\\tests\\sys\\opencrypto\\cryptotest.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 345,
      "nosec": 0
    },
    "freebsd\\tools\\build\\make.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 1.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 2.0,
      "SEVERITY.LOW": 3.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 162,
      "nosec": 0
    },
    "freebsd\\tools\\bus_space\\examples\\am79c900_diag.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 242,
      "nosec": 0
    },
    "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py": {
      "CONFIDENCE.HIGH": 9.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 9.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 39,
      "nosec": 0
    },
    "freebsd\\tools\\sched\\schedgraph.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1293,
      "nosec": 0
    },
    "freebsd\\tools\\test\\hwpmc\\pmctest.py": {
      "CONFIDENCE.HIGH": 6.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 6.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 36,
      "nosec": 0
    },
    "freebsd\\tools\\tools\\notescheck\\notescheck.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 222,
      "nosec": 0
    },
    "freebsd\\tools\\tools\\shlib-compat\\shlib-compat.py": {
      "CONFIDENCE.HIGH": 8.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 1.0,
      "SEVERITY.LOW": 7.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 956,
      "nosec": 0
    },
    "freebsd\\tools\\tools\\sortbench\\bench.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 2.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 63,
      "nosec": 0
    },
    "freebsd\\usr.bin\\fortune\\tools\\do_uniq.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 1.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 54,
      "nosec": 0
    }
  },
  "results": [
    {
      "code": "150 \tdef storeperm(typechr, inheritchr, arg):\n151 \t\tassert typechr in \"ugecs\"\n152 \t\tassert inheritchr in \"ld-\"\n",
      "filename": "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\allow.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 151,
      "line_range": [
        151
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "151 \t\tassert typechr in \"ugecs\"\n152 \t\tassert inheritchr in \"ld-\"\n153 \n154 \t\tdef mkwhokey(t):\n",
      "filename": "freebsd\\cddl\\contrib\\opensolaris\\lib\\pyzfs\\common\\allow.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 152,
      "line_range": [
        152,
        153
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "31 import sys\n32 import subprocess\n33 import time\n",
      "filename": "freebsd\\contrib\\bc\\karatsuba.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 32,
      "line_range": [
        32
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "41 def run(cmd, env=None):\n42 \treturn subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n43 \n",
      "filename": "freebsd\\contrib\\bc\\karatsuba.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 42,
      "line_range": [
        42
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "167 \n168 \t\t\t\tp = subprocess.run(cmd + sys.argv[args_idx:], stderr=subprocess.PIPE)\n169 \n",
      "filename": "freebsd\\contrib\\bc\\karatsuba.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 168,
      "line_range": [
        168
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "182 \n183 \t\t\t\tp = subprocess.run(cmd + sys.argv[args_idx:], stderr=subprocess.PIPE)\n184 \n",
      "filename": "freebsd\\contrib\\bc\\karatsuba.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 183,
      "line_range": [
        183
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "201 \t\t\t\tstart = time.perf_counter()\n202 \t\t\t\tp = subprocess.run(cmd, input=indata, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n203 \t\t\t\tend = time.perf_counter()\n",
      "filename": "freebsd\\contrib\\bc\\karatsuba.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 202,
      "line_range": [
        202
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "32 import shutil\n33 import subprocess\n34 \n35 def usage():\n",
      "filename": "freebsd\\contrib\\bc\\tests\\afl.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 33,
      "line_range": [
        33,
        34
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "49 \ttry:\n50 \t\tp = subprocess.run(cmd, timeout=tout, input=indata, stdout=subprocess.PIPE,\n51 \t\t                   stderr=subprocess.PIPE, env=environ)\n52 \t\tcheck_crash(exebase, out, p.returncode, file, type, test)\n",
      "filename": "freebsd\\contrib\\bc\\tests\\afl.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 50,
      "line_range": [
        50,
        51
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "32 import sys\n33 import subprocess\n34 \n35 def gen(limit=4):\n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 33,
      "line_range": [
        33,
        34
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "35 def gen(limit=4):\n36 \treturn random.randint(0, 2 ** (8 * limit))\n37 \n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 36,
      "line_range": [
        36
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "38 def negative():\n39 \treturn random.randint(0, 1) == 1\n40 \n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 39,
      "line_range": [
        39
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "41 def zero():\n42 \treturn random.randint(0, 2 ** (8) - 1) == 0\n43 \n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 42,
      "line_range": [
        42
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "104 \t\t\targs = [ exe, options ]\n105 \t\t\tp2 = subprocess.run(args, input=indata.encode(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n106 \t\t\texpected = p2.stdout[:-10].decode()\n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 105,
      "line_range": [
        105
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "159 \n160 \top = random.randrange(bessel + 1)\n161 \n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 160,
      "line_range": [
        160
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "185 \n186 \tp = subprocess.run(args, input=indata.encode(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n187 \n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 186,
      "line_range": [
        186
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "204 \n205 \tp = subprocess.run(args, input=indata.encode(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n206 \tcompare(exe, options, p, test, halt, output1, op)\n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 205,
      "line_range": [
        205
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "277 \n278 \tp = subprocess.run(args, input=indata.encode(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n279 \n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 278,
      "line_range": [
        278
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "284 \n285 \tp = subprocess.run(args, input=indata.encode(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n286 \n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 285,
      "line_range": [
        285
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "288 \n289 \tanswer = input(\"\\nAdd test ({}/{}) to test suite? [y/N]: \".format(i + 1, len(tests)))\n290 \n",
      "filename": "freebsd\\contrib\\bc\\tests\\randmath.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "The input method in Python 2 will read from standard input, evaluate and run the resulting string as python source code. This is similar, though in many ways worse, then using eval. On Python 2, use raw_input instead, input is safe in Python 3.",
      "line_number": 289,
      "line_range": [
        289
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b322-input",
      "test_id": "B322",
      "test_name": "blacklist"
    },
    {
      "code": "643         have_psyco = 1\n644     except:\n645         pass\n",
      "filename": "freebsd\\contrib\\bmake\\mk\\meta2deps.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 644,
      "line_range": [
        644
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "665             conf['OBJROOTS'].append(objroot)\n666     except:\n667         pass\n",
      "filename": "freebsd\\contrib\\bmake\\mk\\meta2deps.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 666,
      "line_range": [
        666
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "67                 err1 = max(vals) - mean\n68                 assert err1 >= 0\n69                 err2 = min(vals) - mean\n",
      "filename": "freebsd\\contrib\\cortex-strings\\scripts\\plot-sizes.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 68,
      "line_range": [
        68
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "69                 err2 = min(vals) - mean\n70                 assert err2 <= 0\n71                 Yerr[0].append(abs(err2))\n",
      "filename": "freebsd\\contrib\\cortex-strings\\scripts\\plot-sizes.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 70,
      "line_range": [
        70
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "822                 name = name[7:].strip()\n823                 assert name\n824                 # Handle #include \\<newline> \"header-on-second-line.h\".\n825                 if name.startswith('\\\\'):\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 823,
      "line_range": [
        823,
        824
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "826                     name = name[1:].strip()\n827                 assert name[0] in '<\"', token\n828                 assert name[-1] in '>\"', token\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 827,
      "line_range": [
        827
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "827                 assert name[0] in '<\"', token\n828                 assert name[-1] in '>\"', token\n829                 system = name[0] == '<'\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 828,
      "line_range": [
        828
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "834                 name = name[6:].strip()\n835                 assert name\n836                 value = ''\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 835,
      "line_range": [
        835
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "914         else:\n915             assert token.whence == tokenize.WHENCE_QUEUE, token\n916             self.token_queue.append(token)\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 915,
      "line_range": [
        915
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "924             else:\n925                 assert tokens[-1].whence == tokenize.WHENCE_QUEUE, tokens\n926                 self.token_queue.extend(reversed(tokens))\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 925,
      "line_range": [
        925
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "954         return_type_and_name = self._GetTokensUpTo(tokenize.SYNTAX, '(')\n955         assert len(return_type_and_name) >= 1\n956         return self._GetMethod(return_type_and_name, modifiers, templated_types,\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 955,
      "line_range": [
        955
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "963             token = self._GetNextToken()\n964             assert token.token_type == tokenize.SYNTAX, token\n965             if token.name == '<':\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 964,
      "line_range": [
        964
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "969                 token = self._GetNextToken()\n970             assert token.token_type == tokenize.SYNTAX, token\n971             assert token.name == '(', token\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 970,
      "line_range": [
        970
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "970             assert token.token_type == tokenize.SYNTAX, token\n971             assert token.name == '(', token\n972 \n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 971,
      "line_range": [
        971
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "983             rt = return_type_and_name\n984             assert rt[-1].name == '[', return_type_and_name\n985             assert rt[-2].name == 'operator', return_type_and_name\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 984,
      "line_range": [
        984
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "984             assert rt[-1].name == '[', return_type_and_name\n985             assert rt[-2].name == 'operator', return_type_and_name\n986             name_seq = return_type_and_name[-2:]\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 985,
      "line_range": [
        985
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1007             token = self._GetNextToken()\n1008             assert token.name == '(', token\n1009             parameters = list(self._GetParameters())\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1008,
      "line_range": [
        1008
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1020                 modifiers |= FUNCTION_ATTRIBUTE\n1021                 assert token.name == '(', token\n1022                 # Consume everything between the (parens).\n1023                 unused_tokens = list(self._GetMatchingChar('(', ')'))\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1021,
      "line_range": [
        1021,
        1022
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1026                 modifiers |= FUNCTION_THROW\n1027                 assert token.name == '(', token\n1028                 # Consume everything between the (parens).\n1029                 unused_tokens = list(self._GetMatchingChar('(', ')'))\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1027,
      "line_range": [
        1027,
        1028
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1039 \n1040         assert token.token_type == tokenize.SYNTAX, token\n1041         # Handle ctor initializers.\n1042         if token.name == ':':\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1040,
      "line_range": [
        1040,
        1041
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1059                 token = self._GetNextToken()\n1060                 assert token.token_type == tokenize.SYNTAX, token\n1061                 assert token.name == ';', token\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1060,
      "line_range": [
        1060
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1060                 assert token.token_type == tokenize.SYNTAX, token\n1061                 assert token.name == ';', token\n1062                 return self._CreateVariable(indices, name.name, indices.name,\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1061,
      "line_range": [
        1061
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1091                     # Handle pure-virtual declarations.\n1092                     assert token.token_type == tokenize.CONSTANT, token\n1093                     assert token.name == '0', token\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1092,
      "line_range": [
        1092
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1092                     assert token.token_type == tokenize.CONSTANT, token\n1093                     assert token.name == '0', token\n1094                     modifiers |= FUNCTION_PURE_VIRTUAL\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1093,
      "line_range": [
        1093
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1102 \n1103             assert token.name == ';', (token, return_type_and_name, parameters)\n1104 \n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1103,
      "line_range": [
        1103
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1142             new_name, next = self.GetName(seq_copy[i:])\n1143             assert new_name, 'Got empty new_name, next=%s' % next\n1144             # We got a pointer or ref.  Add it to the name.\n1145             if next and next.token_type == tokenize.SYNTAX:\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1143,
      "line_range": [
        1143,
        1144
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1223         # Must be variable declaration using the type prefixed with keyword.\n1224         assert token.token_type == tokenize.NAME, token\n1225         return self._CreateVariable(token, token.name, name, [], '', None)\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1224,
      "line_range": [
        1224
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1249                     return self._GetMethod(type_and_name, 0, None, False)\n1250                 assert temp.name == ';', (temp, name_tokens, var_token)\n1251             if is_syntax or (is_variable and not self._handling_typedef):\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1250,
      "line_range": [
        1250
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1299             return self.GetMethod(FUNCTION_VIRTUAL + FUNCTION_DTOR, None)\n1300         assert token.token_type == tokenize.NAME or token.name == '::', token\n1301         return_type_and_name = self._GetTokensUpTo(tokenize.SYNTAX, '(')  # )\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1300,
      "line_range": [
        1300
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1314     def handle_public(self):\n1315         assert self.in_class\n1316         self.visibility = VISIBILITY_PUBLIC\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1315,
      "line_range": [
        1315
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1318     def handle_protected(self):\n1319         assert self.in_class\n1320         self.visibility = VISIBILITY_PROTECTED\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1319,
      "line_range": [
        1319
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1322     def handle_private(self):\n1323         assert self.in_class\n1324         self.visibility = VISIBILITY_PRIVATE\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1323,
      "line_range": [
        1323
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1327         tokens = self._GetTokensUpTo(tokenize.SYNTAX, ';')\n1328         assert tokens\n1329         t0 = tokens[0]\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1328,
      "line_range": [
        1328
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1348         tokens = self._GetTokensUpTo(tokenize.SYNTAX, ';')\n1349         assert tokens\n1350         return Delete(tokens[0].start, tokens[0].end, tokens)\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1349,
      "line_range": [
        1349
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1367         # TODO(nnorwitz): clean all this up.\n1368         assert tokens\n1369         name = tokens.pop()\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1368,
      "line_range": [
        1368
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1411                 if tokens[i-1].name == '=':\n1412                     assert i < len_tokens, '%s %s' % (i, tokens)\n1413                     default, unused_next_token = self.GetName(tokens[i:])\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1412,
      "line_range": [
        1412
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1426         token = self._GetNextToken()\n1427         assert token.token_type == tokenize.SYNTAX, token\n1428         assert token.name == '<', token\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1427,
      "line_range": [
        1427
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1427         assert token.token_type == tokenize.SYNTAX, token\n1428         assert token.name == '<', token\n1429         templated_types = self._GetTemplatedTypes()\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1428,
      "line_range": [
        1428
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1464             token = self._GetNextToken()\n1465             assert token.token_type == tokenize.NAME, token\n1466             # TODO(nnorwitz): store kind of inheritance...maybe.\n1467             if token.name not in ('public', 'protected', 'private'):\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1465,
      "line_range": [
        1465,
        1466
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1481             bases_ast = self.converter.ToType(base)\n1482             assert len(bases_ast) == 1, bases_ast\n1483             bases.append(bases_ast[0])\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1482,
      "line_range": [
        1482
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1483             bases.append(bases_ast[0])\n1484             assert next_token.token_type == tokenize.SYNTAX, next_token\n1485             if next_token.name == '{':\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1484,
      "line_range": [
        1484
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1488             # Support multiple inheritance.\n1489             assert next_token.name == ',', next_token\n1490         return bases, token\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1489,
      "line_range": [
        1489
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1495         if class_token.token_type != tokenize.NAME:\n1496             assert class_token.token_type == tokenize.SYNTAX, class_token\n1497             token = class_token\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1496,
      "line_range": [
        1496
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1534         if token.token_type == tokenize.SYNTAX and token.name == '{':\n1535             assert token.token_type == tokenize.SYNTAX, token\n1536             assert token.name == '{', token\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1535,
      "line_range": [
        1535
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1535             assert token.token_type == tokenize.SYNTAX, token\n1536             assert token.name == '{', token\n1537 \n1538             ast = AstBuilder(self.GetScope(), self.filename, class_name,\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1536,
      "line_range": [
        1536,
        1537
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1544                 if token.token_type != tokenize.NAME:\n1545                     assert token.token_type == tokenize.SYNTAX, token\n1546                     assert token.name == ';', token\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1545,
      "line_range": [
        1545
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1545                     assert token.token_type == tokenize.SYNTAX, token\n1546                     assert token.name == ';', token\n1547                 else:\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1546,
      "line_range": [
        1546
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1571         self.namespace_stack.append(name)\n1572         assert token.token_type == tokenize.SYNTAX, token\n1573         # Create an internal token that denotes when the namespace is complete.\n1574         internal_token = tokenize.Token(_INTERNAL_TOKEN, _NAMESPACE_POP,\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1572,
      "line_range": [
        1572,
        1573
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1579             name, next_token = self.GetName()\n1580             assert next_token.name == ';', next_token\n1581             self._AddBackToken(internal_token)\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1580,
      "line_range": [
        1580
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1582         else:\n1583             assert token.name == '{', token\n1584             tokens = list(self.GetScope())\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1583,
      "line_range": [
        1583
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1592         tokens = self._GetTokensUpTo(tokenize.SYNTAX, ';')\n1593         assert tokens\n1594         return Using(tokens[0].start, tokens[0].end, tokens)\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1593,
      "line_range": [
        1593
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1596     def handle_explicit(self):\n1597         assert self.in_class\n1598         # Nothing much to do.\n1599         # TODO(nnorwitz): maybe verify the method name == class name.\n1600         # This must be a ctor.\n1601         return self.GetMethod(FUNCTION_CTOR, None)\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1597,
      "line_range": [
        1597,
        1598,
        1599,
        1600
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1620         token = self._GetNextToken()\n1621         assert token.token_type == tokenize.SYNTAX\n1622         assert token.name == ':'\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1621,
      "line_range": [
        1621
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1621         assert token.token_type == tokenize.SYNTAX\n1622         assert token.name == ':'\n1623 \n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1622,
      "line_range": [
        1622
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1637         tokens = self._GetTokensUpTo(tokenize.SYNTAX, ';')\n1638         assert len(tokens) == 1, str(tokens)\n1639         return Goto(tokens[0].start, tokens[0].end, tokens[0].name)\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1638,
      "line_range": [
        1638
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1698         return\n1699     except:\n1700         pass\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\ast.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 1699,
      "line_range": [
        1699
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "239                     i = source.find('\"', i+1) + 1\n240                     assert i > 0\n241                     continue\n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\generator\\cpp\\tokenize.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 240,
      "line_range": [
        240
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "73   # Invokes upload.py with the modified command line flags.\n74   os.execv(upload_py_path, upload_py_argv)\n75 \n",
      "filename": "freebsd\\contrib\\googletest\\googlemock\\scripts\\upload_gmock.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "48 \n49   f = os.popen(command, 'r')\n50   lines = [line.strip() for line in f.readlines()]\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\scripts\\common.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 49,
      "line_range": [
        49
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "73   # Invokes upload.py with the modified command line flags.\n74   os.execv(upload_py_path, upload_py_argv)\n75 \n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\scripts\\upload_gtest.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "60       [sys.executable, '-c', 'import os; print \\'EMPTY_VAR\\' in os.environ'])\n61   CAN_PASS_EMPTY_ENV = eval(child.output)\n62 \n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\googletest-filter-unittest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of possibly insecure function - consider using safer ast.literal_eval.",
      "line_number": 61,
      "line_range": [
        61
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval",
      "test_id": "B307",
      "test_name": "blacklist"
    },
    {
      "code": "76       ])\n77   CAN_UNSET_ENV = eval(child.output)\n78 \n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\googletest-filter-unittest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of possibly insecure function - consider using safer ast.literal_eval.",
      "line_number": 77,
      "line_range": [
        77
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval",
      "test_id": "B307",
      "test_name": "blacklist"
    },
    {
      "code": "45 try:\n46   import subprocess\n47   _SUBPROCESS_MODULE_AVAILABLE = True\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_test_utils.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 46,
      "line_range": [
        46
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "238 \n239       p = subprocess.Popen(command,\n240                            stdout=subprocess.PIPE, stderr=stderr,\n241                            cwd=working_dir, universal_newlines=True, env=env)\n242       # communicate returns a tuple with the file object for the child's\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_test_utils.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 239,
      "line_range": [
        239,
        240,
        241
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "268         if capture_stderr:\n269           p = popen2.Popen4(command)\n270         else:\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_test_utils.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 269,
      "line_range": [
        269
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "270         else:\n271           p = popen2.Popen3(command)\n272         p.tochild.close()\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_test_utils.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 271,
      "line_range": [
        271
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "34 import os\n35 from xml.dom import minidom, Node\n36 import gtest_test_utils\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_xml_outfiles_test.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Using minidom to parse untrusted XML data is known to be vulnerable to XML attacks. Replace minidom with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 35,
      "line_range": [
        35
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b408-import-xml-minidom",
      "test_id": "B408",
      "test_name": "blacklist"
    },
    {
      "code": "125 \n126     expected = minidom.parseString(expected_xml)\n127     if os.path.isfile(output_file1):\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_xml_outfiles_test.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.dom.minidom.parseString to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.minidom.parseString with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 126,
      "line_range": [
        126
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-minidom",
      "test_id": "B318",
      "test_name": "blacklist"
    },
    {
      "code": "127     if os.path.isfile(output_file1):\n128       actual = minidom.parse(output_file1)\n129     else:\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_xml_outfiles_test.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.dom.minidom.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.minidom.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 128,
      "line_range": [
        128
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-minidom",
      "test_id": "B318",
      "test_name": "blacklist"
    },
    {
      "code": "129     else:\n130       actual = minidom.parse(output_file2)\n131     self.NormalizeXml(actual.documentElement)\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_xml_outfiles_test.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.dom.minidom.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.dom.minidom.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 130,
      "line_range": [
        130
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-minidom",
      "test_id": "B318",
      "test_name": "blacklist"
    },
    {
      "code": "32 import re\n33 from xml.dom import minidom, Node\n34 import gtest_test_utils\n",
      "filename": "freebsd\\contrib\\googletest\\googletest\\test\\gtest_xml_test_utils.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Using minidom to parse untrusted XML data is known to be vulnerable to XML attacks. Replace minidom with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 33,
      "line_range": [
        33
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b408-import-xml-minidom",
      "test_id": "B408",
      "test_name": "blacklist"
    },
    {
      "code": "233             # 4. pair[0] < val == pair[1]: decrease pair[1].\n234             assert pair[0] <= val <= pair[1]\n235             if pair[0] == val:\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\numalloc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 234,
      "line_range": [
        234
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "253         \"\"\"\n254         assert nbytes > 0\n255         # Try to get everything at once (should usually succeed).\n256         # Return immediately for EOF or got-all-data.\n257         data = self.channel.recv(nbytes)\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\p9conn.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 254,
      "line_range": [
        254,
        255,
        256
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "284         size = len(data)\n285         assert size >= 4\n286         if size > self.max_payload:\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\p9conn.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 285,
      "line_range": [
        285
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "398         \"set the reply info for the given tag\"\n399         assert tag >= 0 and tag < 65536\n400         with self.lock:\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\p9conn.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 399,
      "line_range": [
        399
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "431             return\n432         assert tag >= 0 and tag < 65535\n433         with self.lock:\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\p9conn.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 432,
      "line_range": [
        432
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "83     # works in more cases.)\n84     exec(\"\"\"def _exec(string, gdict, ldict):\n85         \"Python 2: exec string in gdict, ldict\"\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\pfod.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of exec detected.",
      "line_number": 84,
      "line_range": [
        84
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
      "test_id": "B102",
      "test_name": "exec_used"
    },
    {
      "code": "88     # py3k: just make an alias for builtin function exec\n89     exec(\"_exec = exec\")\n90 \n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\pfod.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of exec detected.",
      "line_number": 89,
      "line_range": [
        89
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
      "test_id": "B102",
      "test_name": "exec_used"
    },
    {
      "code": "484                 continue\n485             assert sub.aux == 'auto' or sub.aux == 'len'\n486             if self.autos is None:\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\protocol.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 485,
      "line_range": [
        485
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "521                     # encoding error.\n522                     assert sub.aux == 'len'\n523                     if data.get(sub.repeat) is not None:\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\protocol.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 522,
      "line_range": [
        522
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "549             proto_tuple = p9_data.protocol[name]\n550             assert dtype == proto_tuple[0]\n551             packinfo = pfods[dtype]\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\protocol.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 550,
      "line_range": [
        550
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "678         if caller is not None:\n679             assert caller in ('pack', 'pack_from') and packinfo is None\n680             # Indirect call from pack_from(), or from pack() after\n681             # pack() built a PFOD.  We make sure this kind of PFOD\n682             # is allowed for this protocol.\n683             packinfo = self.pfods.get(data.__class__, None)\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\protocol.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 679,
      "line_range": [
        679,
        680,
        681,
        682
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "246                 'while unpacking {0!r}'.format(self.name))\n247         assert len(tup) == 1\n248         return tup[0], offset + via.size\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\sequencer.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 247,
      "line_range": [
        247
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "329     def __init__(self, klass, name, sequence, aux=None):\n330         assert len(sequence) == len(klass()._fields) # temporary\n331         super(EncDecTyped, self).__init__(name, aux)\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\sequencer.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 330,
      "line_range": [
        330
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "432         num = vdict[self.repeat]\n433         assert num == len(val)\n434         if self.sub is None:\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\sequencer.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 433,
      "line_range": [
        433
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "434         if self.sub is None:\n435             assert isinstance(val, bytes)\n436             return [val]\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\sequencer.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 435,
      "line_range": [
        435
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "447         else:\n448             assert num >= 0\n449         if self.sub is None:\n",
      "filename": "freebsd\\contrib\\lib9p\\pytest\\sequencer.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 448,
      "line_range": [
        448
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "23 \n24 import subprocess\n25 \n26 #\n27 # Instead of hardcoding the version number here, we read it from the\n28 # project's configure script\n29 #\n30 vers_cmd = \"grep AC_INIT ../configure.ac | awk '{ print substr($2, 2, length($2) - 3);}'\"\n",
      "filename": "freebsd\\contrib\\libxo\\doc\\conf.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 24,
      "line_range": [
        24,
        25,
        26,
        27,
        28,
        29
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "30 vers_cmd = \"grep AC_INIT ../configure.ac | awk '{ print substr($2, 2, length($2) - 3);}'\"\n31 version = subprocess.check_output(vers_cmd, shell=True).decode(\"utf-8\") \n32 \n",
      "filename": "freebsd\\contrib\\libxo\\doc\\conf.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "subprocess call with shell=True identified, security issue.",
      "line_number": 31,
      "line_range": [
        31
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
      "test_id": "B602",
      "test_name": "subprocess_popen_with_shell_equals_true"
    },
    {
      "code": "106                         termios.tcsetattr(fd, termios.TCSADRAIN, old)\n107             except:\n108                 pass\n",
      "filename": "freebsd\\contrib\\llvm-project\\lldb\\source\\Interpreter\\embedded_interpreter.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 107,
      "line_range": [
        107
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "29 \n30 import os, sys, subprocess\n31 import filecmp\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 30,
      "line_range": [
        30
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "318   if not httpd_port:\n319     httpd_port = random.randrange(1024, 30000)\n320   if not base_url:\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 319,
      "line_range": [
        319
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "365   if os.path.exists(tgt):\n366     assert os.path.isfile(tgt)\n367     if filecmp.cmp(src, tgt):\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 366,
      "line_range": [
        366
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "468     env['SVN_DBG_STACKTRACES_TO_STDERR'] = 'y'\n469     self.proc = subprocess.Popen([self.path] + args[1:], env=env)\n470 \n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 469,
      "line_range": [
        469
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "665     # Create the cheapest to compare password form for our testsuite\n666     os.spawnv(os.P_WAIT, htpasswd, ['htpasswd.exe', '-bcp', self.httpd_users,\n667                                     'jrandom', 'rayjandom'])\n668     os.spawnv(os.P_WAIT, htpasswd, ['htpasswd.exe', '-bp',  self.httpd_users,\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 666,
      "line_range": [
        666,
        667
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "667                                     'jrandom', 'rayjandom'])\n668     os.spawnv(os.P_WAIT, htpasswd, ['htpasswd.exe', '-bp',  self.httpd_users,\n669                                     'jconstant', 'rayjandom'])\n670     os.spawnv(os.P_WAIT, htpasswd, ['htpasswd.exe', '-bp',  self.httpd_users,\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 668,
      "line_range": [
        668,
        669
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "669                                     'jconstant', 'rayjandom'])\n670     os.spawnv(os.P_WAIT, htpasswd, ['htpasswd.exe', '-bp',  self.httpd_users,\n671                                     '__dumpster__', '__loadster__'])\n672     os.spawnv(os.P_WAIT, htpasswd, ['htpasswd.exe', '-bp',  self.httpd_users,\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 670,
      "line_range": [
        670,
        671
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "671                                     '__dumpster__', '__loadster__'])\n672     os.spawnv(os.P_WAIT, htpasswd, ['htpasswd.exe', '-bp',  self.httpd_users,\n673                                     'JRANDOM', 'rayjandom'])\n674     os.spawnv(os.P_WAIT, htpasswd, ['htpasswd.exe', '-bp',  self.httpd_users,\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 672,
      "line_range": [
        672,
        673
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "673                                     'JRANDOM', 'rayjandom'])\n674     os.spawnv(os.P_WAIT, htpasswd, ['htpasswd.exe', '-bp',  self.httpd_users,\n675                                     'JCONSTANT', 'rayjandom'])\n676 \n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 674,
      "line_range": [
        674,
        675
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "936     print('Installing service %s' % self.service_name)\n937     os.spawnv(os.P_WAIT, self.path, self.httpd_args + ['-k', 'install'])\n938     print('Starting service %s' % self.service_name)\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 937,
      "line_range": [
        937
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "938     print('Starting service %s' % self.service_name)\n939     os.spawnv(os.P_WAIT, self.path, self.httpd_args + ['-k', 'start'])\n940 \n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 939,
      "line_range": [
        939
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "942     \"Stop and uninstall HTTPD service\"\n943     os.spawnv(os.P_WAIT, self.path, self.httpd_args + ['-k', 'stop'])\n944     os.spawnv(os.P_WAIT, self.path, self.httpd_args + ['-k', 'uninstall'])\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 943,
      "line_range": [
        943
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "943     os.spawnv(os.P_WAIT, self.path, self.httpd_args + ['-k', 'stop'])\n944     os.spawnv(os.P_WAIT, self.path, self.httpd_args + ['-k', 'uninstall'])\n945 \n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 944,
      "line_range": [
        944
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "949     print(self.httpd_args)\n950     self.proc = subprocess.Popen([self.path] + self.httpd_args[1:])\n951 \n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 950,
      "line_range": [
        950
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "989     print(self.memcached_args)\n990     self.proc = subprocess.Popen([self.path] + self.memcached_args)\n991 \n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 990,
      "line_range": [
        990
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1177 \n1178     r = subprocess.call(args + tuple(['org.apache.subversion.javahl.RunTests']))\n1179     sys.stdout.flush()\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1178,
      "line_range": [
        1178
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1186     sys.stdout.flush()\n1187     r = subprocess.call(args + tuple(['org.tigris.subversion.javahl.RunTests']))\n1188     sys.stdout.flush()\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1187,
      "line_range": [
        1187
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1239 \n1240     r = subprocess.call([\n1241               perl_exe,\n1242               '-MExtUtils::Command::MM',\n1243               '-e', 'test_harness()'\n1244               ] + tests)\n1245   finally:\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1240,
      "line_range": [
        1240,
        1241,
        1242,
        1243,
        1244
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1292 \n1293     r = subprocess.call([\n1294               python_exe,\n1295               os.path.join(py_src, 'tests', 'run_all.py')\n1296               ])\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1293,
      "line_range": [
        1293,
        1294,
        1295
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1327       os.environ[\"SVN_DBG_NO_ABORT_ON_ERROR_LEAK\"] = 'YES'\n1328       r = subprocess.call([ruby_exe] + ruby_args)\n1329     finally:\n",
      "filename": "freebsd\\contrib\\subversion\\win-tests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1328,
      "line_range": [
        1328
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "56             return wpas\n57         except Exception as e:\n58             pass\n",
      "filename": "freebsd\\contrib\\wpa\\hostapd\\wps-ap-nfc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 57,
      "line_range": [
        57
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "38             return wpas\n39         except Exception as e:\n40             pass\n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\dpp-qrcode.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 39,
      "line_range": [
        39
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "266 \t\telse:\n267 \t\t\tassert False, \"unhandled option\"\n268 \n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_connect.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 267,
      "line_range": [
        267
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "140 \t\telse:\n141 \t\t\tassert False, \"unhandled option\"\n142 \n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_disconnect.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 141,
      "line_range": [
        141
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "164 \n165 \texcept:\n166 \t\tpass\n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_disconnect.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 165,
      "line_range": [
        165
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "159 \t\telse:\n160 \t\t\tassert False, \"unhandled option\"\n161 \n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_find.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 160,
      "line_range": [
        160
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "188 \n189 \texcept:\n190 \t\tpass\n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_find.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 189,
      "line_range": [
        189
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "140 \t\telse:\n141 \t\t\tassert False, \"unhandled option\"\n142 \n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_flush.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 141,
      "line_range": [
        141
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "163 \n164 \texcept:\n165 \t\tpass\n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_flush.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 164,
      "line_range": [
        164
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "203 \t\telse:\n204 \t\t\tassert False, \"unhandled option\"\n205 \n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_group_add.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 204,
      "line_range": [
        204
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "174 \t\telse:\n175 \t\t\tassert False, \"unhandled option\"\n176 \n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_invite.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 175,
      "line_range": [
        175
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "149 \t\telse:\n150 \t\t\tassert False, \"unhandled option\"\n151 \n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_listen.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 150,
      "line_range": [
        150
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "178 \n179 \texcept:\n180 \t\tpass\n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_listen.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 179,
      "line_range": [
        179
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "145 \t\telse:\n146 \t\t\tassert False, \"unhandled option\"\n147 \n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_stop_find.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 146,
      "line_range": [
        146
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "169 \n170 \texcept:\n171 \t\tpass\n",
      "filename": "freebsd\\contrib\\wpa\\wpa_supplicant\\examples\\p2p\\p2p_stop_find.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 170,
      "line_range": [
        170
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "48 import os\n49 import subprocess\n50 import sys\n",
      "filename": "freebsd\\release\\scripts\\list-new-changesets.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 49,
      "line_range": [
        49
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "50 import sys\n51 import xml.etree.ElementTree\n52 \n53 def print_logentry(logentry):\n",
      "filename": "freebsd\\release\\scripts\\list-new-changesets.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 51,
      "line_range": [
        51,
        52
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "85 \n86     proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n87     (out, err) = proc.communicate()\n",
      "filename": "freebsd\\release\\scripts\\list-new-changesets.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 86,
      "line_range": [
        86
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "93     displayed_entries = 0\n94     root = xml.etree.ElementTree.fromstring(out)\n95 \n",
      "filename": "freebsd\\release\\scripts\\list-new-changesets.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 94,
      "line_range": [
        94
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "631         have_psyco = 1\n632     except:\n633         pass\n",
      "filename": "freebsd\\share\\mk\\meta2deps.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 632,
      "line_range": [
        632
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "653             conf['OBJROOTS'].append(objroot)\n654     except:\n655         pass\n",
      "filename": "freebsd\\share\\mk\\meta2deps.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 654,
      "line_range": [
        654
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "106 ZFS_ERR_CHECKPOINT_EXISTS = zfs_errno.ZFS_ERR_CHECKPOINT_EXISTS\n107 assert(ZFS_ERR_CHECKPOINT_EXISTS == 1024)\n108 ZFS_ERR_DISCARDING_CHECKPOINT = zfs_errno.ZFS_ERR_DISCARDING_CHECKPOINT\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\_constants.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 107,
      "line_range": [
        107
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "489     # is not empty, then it contains missing snapshots.\n490     assert all(errlist[x] == errno.ENOENT for x in errlist)\n491     return list(errlist.keys())\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 490,
      "line_range": [
        490
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "536     # is not empty, then it contains missing snapshots and tags.\n537     assert all(errlist[x] == errno.ENOENT for x in errlist)\n538     return list(errlist.keys())\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 537,
      "line_range": [
        537
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "34 import stat\n35 import subprocess\n36 import sys\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 35,
      "line_range": [
        35
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "73     try:\n74         subprocess.check_output(mount_cmd, stderr=subprocess.STDOUT)\n75         try:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "78             with suppress():\n79                 subprocess.check_output(unmount_cmd, stderr=subprocess.STDOUT)\n80     except subprocess.CalledProcessError as e:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 79,
      "line_range": [
        79
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1858         if sys.version_info < (3, 0):\n1859             proc = subprocess.Popen(['true'], stdin=subprocess.PIPE)\n1860             proc.wait()\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 1859,
      "line_range": [
        1859
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "1858         if sys.version_info < (3, 0):\n1859             proc = subprocess.Popen(['true'], stdin=subprocess.PIPE)\n1860             proc.wait()\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1859,
      "line_range": [
        1859
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1864         else:\n1865             with subprocess.Popen(['true'], stdin=subprocess.PIPE) as proc:\n1866                 proc.wait()\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 1865,
      "line_range": [
        1865
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "1864         else:\n1865             with subprocess.Popen(['true'], stdin=subprocess.PIPE) as proc:\n1866                 proc.wait()\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1865,
      "line_range": [
        1865
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1880         if sys.version_info < (3, 0):\n1881             p = subprocess.Popen(['sleep', '2'], stdin=subprocess.PIPE)\n1882             with self.assertRaises(lzc_exc.StreamIOError) as ctx:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 1881,
      "line_range": [
        1881
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "1880         if sys.version_info < (3, 0):\n1881             p = subprocess.Popen(['sleep', '2'], stdin=subprocess.PIPE)\n1882             with self.assertRaises(lzc_exc.StreamIOError) as ctx:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1881,
      "line_range": [
        1881
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1886         else:\n1887             with subprocess.Popen(['sleep', '2'], stdin=subprocess.PIPE) as p:\n1888                 with self.assertRaises(lzc_exc.StreamIOError) as ctx:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 1887,
      "line_range": [
        1887
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "1886         else:\n1887             with subprocess.Popen(['sleep', '2'], stdin=subprocess.PIPE) as p:\n1888                 with self.assertRaises(lzc_exc.StreamIOError) as ctx:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1887,
      "line_range": [
        1887
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4139 \n4140             subprocess.check_output(\n4141                 self._zpool_create, stderr=subprocess.STDOUT)\n4142 \n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4140,
      "line_range": [
        4140,
        4141
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4156                 shutil.copyfile(cachefile, cachefile + '.tmp')\n4157                 subprocess.check_output(\n4158                     ['zpool', 'export', '-f', self._pool_name],\n4159                     stderr=subprocess.STDOUT)\n4160                 os.rename(cachefile + '.tmp', cachefile)\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 4157,
      "line_range": [
        4157,
        4158,
        4159
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "4156                 shutil.copyfile(cachefile, cachefile + '.tmp')\n4157                 subprocess.check_output(\n4158                     ['zpool', 'export', '-f', self._pool_name],\n4159                     stderr=subprocess.STDOUT)\n4160                 os.rename(cachefile + '.tmp', cachefile)\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4157,
      "line_range": [
        4157,
        4158,
        4159
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4160                 os.rename(cachefile + '.tmp', cachefile)\n4161                 subprocess.check_output(\n4162                     ['zpool', 'import', '-f', '-N', '-c', cachefile,\n4163                         '-o', 'readonly=on', self._pool_name],\n4164                     stderr=subprocess.STDOUT)\n4165                 os.remove(cachefile)\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 4161,
      "line_range": [
        4161,
        4162,
        4163,
        4164
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "4160                 os.rename(cachefile + '.tmp', cachefile)\n4161                 subprocess.check_output(\n4162                     ['zpool', 'import', '-f', '-N', '-c', cachefile,\n4163                         '-o', 'readonly=on', self._pool_name],\n4164                     stderr=subprocess.STDOUT)\n4165                 os.remove(cachefile)\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4161,
      "line_range": [
        4161,
        4162,
        4163,
        4164
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4205             try:\n4206                 subprocess.check_output(\n4207                     ['zpool', 'destroy', '-f', self._pool_name],\n4208                     stderr=subprocess.STDOUT)\n4209                 subprocess.check_output(\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 4206,
      "line_range": [
        4206,
        4207,
        4208
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "4205             try:\n4206                 subprocess.check_output(\n4207                     ['zpool', 'destroy', '-f', self._pool_name],\n4208                     stderr=subprocess.STDOUT)\n4209                 subprocess.check_output(\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4206,
      "line_range": [
        4206,
        4207,
        4208
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4208                     stderr=subprocess.STDOUT)\n4209                 subprocess.check_output(\n4210                     self._zpool_create, stderr=subprocess.STDOUT)\n4211                 break\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4209,
      "line_range": [
        4209,
        4210
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4225         try:\n4226             subprocess.check_output(\n4227                 ['zpool', 'destroy', '-f', self._pool_name],\n4228                 stderr=subprocess.STDOUT)\n4229         except Exception:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 4226,
      "line_range": [
        4226,
        4227,
        4228
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "4225         try:\n4226             subprocess.check_output(\n4227                 ['zpool', 'destroy', '-f', self._pool_name],\n4228                 stderr=subprocess.STDOUT)\n4229         except Exception:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4226,
      "line_range": [
        4226,
        4227,
        4228
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4228                 stderr=subprocess.STDOUT)\n4229         except Exception:\n4230             pass\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 4229,
      "line_range": [
        4229
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "4232             os.remove(self._pool_file_path)\n4233         except Exception:\n4234             pass\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 4233,
      "line_range": [
        4233
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "4236             os.remove(self._pool_file_path + _TempPool._cachefile_suffix)\n4237         except Exception:\n4238             pass\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 4237,
      "line_range": [
        4237
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "4241                 self._pool_file_path + _TempPool._cachefile_suffix + '.tmp')\n4242         except Exception:\n4243             pass\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 4242,
      "line_range": [
        4242
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "4276     def isPoolFeatureAvailable(self, feature):\n4277         output = subprocess.check_output(\n4278             ['zpool', 'get', '-H', 'feature@' + feature, self._pool_name])\n4279         output = output.strip()\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 4277,
      "line_range": [
        4277,
        4278
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "4276     def isPoolFeatureAvailable(self, feature):\n4277         output = subprocess.check_output(\n4278             ['zpool', 'get', '-H', 'feature@' + feature, self._pool_name])\n4279         output = output.strip()\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4277,
      "line_range": [
        4277,
        4278
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4282     def isPoolFeatureEnabled(self, feature):\n4283         output = subprocess.check_output(\n4284             ['zpool', 'get', '-H', 'feature@' + feature, self._pool_name])\n4285         output = output.split()[2]\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 4283,
      "line_range": [
        4283,
        4284
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "4282     def isPoolFeatureEnabled(self, feature):\n4283         output = subprocess.check_output(\n4284             ['zpool', 'get', '-H', 'feature@' + feature, self._pool_name])\n4285         output = output.split()[2]\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4283,
      "line_range": [
        4283,
        4284
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4312         if received:\n4313             output = subprocess.check_output(\n4314                 ['zfs', 'get', '-pH', '-o', 'received', propname, self._name])\n4315         else:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 4313,
      "line_range": [
        4313,
        4314
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "4312         if received:\n4313             output = subprocess.check_output(\n4314                 ['zfs', 'get', '-pH', '-o', 'received', propname, self._name])\n4315         else:\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4313,
      "line_range": [
        4313,
        4314
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4315         else:\n4316             output = subprocess.check_output(\n4317                 ['zfs', 'get', '-pH', '-o', 'value', propname, self._name])\n4318         return output.strip()\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 4316,
      "line_range": [
        4316,
        4317
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "4315         else:\n4316             output = subprocess.check_output(\n4317                 ['zfs', 'get', '-pH', '-o', 'value', propname, self._name])\n4318         return output.strip()\n",
      "filename": "freebsd\\sys\\contrib\\openzfs\\contrib\\pyzfs\\libzfs_core\\test\\test_libzfs_core.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 4316,
      "line_range": [
        4316,
        4317
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "67     # Check ether fields\n68     assert orig_pkt.src == fwd_pkt.dst\n69     assert orig_pkt.dst == fwd_pkt.src\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 68,
      "line_range": [
        68
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "68     assert orig_pkt.src == fwd_pkt.dst\n69     assert orig_pkt.dst == fwd_pkt.src\n70     assert len(orig_pkt) == len(fwd_pkt)\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 69,
      "line_range": [
        69
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "69     assert orig_pkt.dst == fwd_pkt.src\n70     assert len(orig_pkt) == len(fwd_pkt)\n71     # Check IP\n72     fwd_ip = fwd_pkt[sc.IP]\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 70,
      "line_range": [
        70,
        71
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "73     orig_ip = orig_pkt[sc.IP]\n74     assert orig_ip.src == orig_ip.src\n75     assert orig_ip.dst == fwd_ip.dst\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "74     assert orig_ip.src == orig_ip.src\n75     assert orig_ip.dst == fwd_ip.dst\n76     assert orig_ip.ttl == fwd_ip.ttl + 1\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 75,
      "line_range": [
        75
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "75     assert orig_ip.dst == fwd_ip.dst\n76     assert orig_ip.ttl == fwd_ip.ttl + 1\n77     # Check ICMP\n78     fwd_icmp = fwd_ip[sc.ICMP]\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 76,
      "line_range": [
        76,
        77
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "79     orig_icmp = orig_ip[sc.ICMP]\n80     assert bytes(orig_ip.payload) == bytes(fwd_ip.payload)\n81 \n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 80,
      "line_range": [
        80
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "100                        stop_filter=filter_f, lfilter=filter_f, timeout=5)\n101     assert len(packets) > 0\n102     fwd_pkt = packets[-1]\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 101,
      "line_range": [
        101
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "136                        stop_filter=filter_f, lfilter=filter_f, timeout=5)\n137     assert len(packets) > 0\n138     check_forwarded_ip_packet(pkt, packets[-1])\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 137,
      "line_range": [
        137
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "148     # Check ether fields\n149     assert orig_pkt.src == fwd_pkt.dst\n150     assert orig_pkt.dst == fwd_pkt.src\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 149,
      "line_range": [
        149
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "149     assert orig_pkt.src == fwd_pkt.dst\n150     assert orig_pkt.dst == fwd_pkt.src\n151     assert len(orig_pkt) == len(fwd_pkt)\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 150,
      "line_range": [
        150
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "150     assert orig_pkt.dst == fwd_pkt.src\n151     assert len(orig_pkt) == len(fwd_pkt)\n152     # Check IP\n153     fwd_ip = fwd_pkt[sc.IPv6]\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 151,
      "line_range": [
        151,
        152
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "154     orig_ip = orig_pkt[sc.IPv6]\n155     assert orig_ip.src == orig_ip.src\n156     assert orig_ip.dst == fwd_ip.dst\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 155,
      "line_range": [
        155
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "155     assert orig_ip.src == orig_ip.src\n156     assert orig_ip.dst == fwd_ip.dst\n157     assert orig_ip.hlim == fwd_ip.hlim + 1\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 156,
      "line_range": [
        156
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "156     assert orig_ip.dst == fwd_ip.dst\n157     assert orig_ip.hlim == fwd_ip.hlim + 1\n158     # Check ICMPv6\n159     assert bytes(orig_ip.payload) == bytes(fwd_ip.payload)\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 157,
      "line_range": [
        157,
        158
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "158     # Check ICMPv6\n159     assert bytes(orig_ip.payload) == bytes(fwd_ip.payload)\n160 \n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 159,
      "line_range": [
        159
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "179                        stop_filter=filter_f, lfilter=filter_f, timeout=5)\n180     assert len(packets) > 0\n181     fwd_pkt = packets[-1]\n",
      "filename": "freebsd\\tests\\sys\\common\\sender.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 180,
      "line_range": [
        180
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "33 import sys\n34 from subprocess import check_output\n35 from time import sleep\n",
      "filename": "freebsd\\tests\\sys\\kern\\sonewconn_overflow.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with check_output module.",
      "line_number": 34,
      "line_range": [
        34
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "59                 s.connect(self.addr)\n60             except:\n61                 continue\n",
      "filename": "freebsd\\tests\\sys\\kern\\sonewconn_overflow.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Continue detected.",
      "line_number": 60,
      "line_range": [
        60
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b112_try_except_continue.html",
      "test_id": "B112",
      "test_name": "try_except_continue"
    },
    {
      "code": "88         # Clear the dmesg buffer to prevent rotating causes issues\n89         os.system('/sbin/dmesg -c > /dev/null')\n90         # Figure out how big the dmesg buffer is.\n",
      "filename": "freebsd\\tests\\sys\\kern\\sonewconn_overflow.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell",
      "line_number": 89,
      "line_range": [
        89
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "90         # Figure out how big the dmesg buffer is.\n91         self.dmesgOff = len(check_output(\"/sbin/dmesg\"))\n92 \n",
      "filename": "freebsd\\tests\\sys\\kern\\sonewconn_overflow.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 91,
      "line_range": [
        91
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "95         for i in range(0, 3):\n96             dmesg = check_output(\"/sbin/dmesg\")\n97             newOff = len(dmesg)\n",
      "filename": "freebsd\\tests\\sys\\kern\\sonewconn_overflow.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 96,
      "line_range": [
        96
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "104                         return True\n105                 except:\n106                     pass\n",
      "filename": "freebsd\\tests\\sys\\kern\\sonewconn_overflow.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 105,
      "line_range": [
        105
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "71 \tfor i in range(0,127):\n72 \t\tfid=random.randint(0,0xffff)\n73 \t\tfoffset=random.randint(0,0xffff)\n",
      "filename": "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_17.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 72,
      "line_range": [
        72
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "72 \t\tfid=random.randint(0,0xffff)\n73 \t\tfoffset=random.randint(0,0xffff)\n74 \t\tfm=random.randint(0,1)\n",
      "filename": "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_17.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 73,
      "line_range": [
        73
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "73 \t\tfoffset=random.randint(0,0xffff)\n74 \t\tfm=random.randint(0,1)\n75 \t\tfsrc=sp.RandIP6()\n",
      "filename": "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_17.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "71 \tfor i in range(0,127):\n72 \t\tfid=random.randint(0,0xffff)\n73 \t\tfoffset=random.randint(0,0xffff)\n",
      "filename": "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_18.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 72,
      "line_range": [
        72
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "72 \t\tfid=random.randint(0,0xffff)\n73 \t\tfoffset=random.randint(0,0xffff)\n74 \t\tfm=random.randint(0,1)\n",
      "filename": "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_18.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 73,
      "line_range": [
        73
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "73 \t\tfoffset=random.randint(0,0xffff)\n74 \t\tfm=random.randint(0,1)\n75 \t\tfsrc=sp.RandIP6()\n",
      "filename": "freebsd\\tests\\sys\\netinet6\\frag6\\frag6_18.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "43     padding = 8\n44     fid = random.randint(0,100000)\n45     frag_0 = sp.IPv6ExtHdrFragment(id=fid, nh=UDP_PROTO, m=1, offset=0)\n",
      "filename": "freebsd\\tests\\sys\\netpfil\\pf\\CVE-2019-5597.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 44,
      "line_range": [
        44
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "267         else:\n268             assert len(tag) == self._maclen, \\\n269                 '%d != %d' % (len(tag), self._maclen)\n270             tag = array.array('B', tag)\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 268,
      "line_range": [
        268,
        269
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "284     def perftest(self, op, size, timeo=3):\n285         inp = array.array('B', (random.randint(0, 255) for x in range(size)))\n286         inp = str_to_ascii(inp)\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 285,
      "line_range": [
        285
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "300             cop.mac = m.buffer_info()[0]\n301         ivbuf = array.array('B', (random.randint(0, 255) for x in range(16)))\n302         cop.iv = ivbuf.buffer_info()[0]\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 301,
      "line_range": [
        301
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "586 \n587         assert ct == enc\n588 \n589         dec = c.decrypt(ct, iv)\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 587,
      "line_range": [
        587,
        588
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "593 \n594         assert pt == dec\n595     elif False:\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 594,
      "line_range": [
        594
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "607 \n608         assert ct == enc\n609 \n610         dec = c.decrypt(ct, iv)\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 608,
      "line_range": [
        608,
        609
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "614 \n615         assert pt == dec\n616     elif False:\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 615,
      "line_range": [
        615
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "627 \n628         assert ct == enc\n629 \n630         dec = c.decrypt(ct, iv)\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 628,
      "line_range": [
        628,
        629
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "634 \n635         assert pt == dec\n636     elif False:\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 635,
      "line_range": [
        635
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "652 \n653         assert enc == ct\n654 \n655         print('etg:', binascii.hexlify(enctag))\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 653,
      "line_range": [
        653,
        654
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "656         print('tag:', binascii.hexlify(tag))\n657         assert enctag == tag\n658 \n659         # Make sure we get EBADMSG\n660         #enctag = enctag[:-1] + 'a'\n661         dec, dectag = c.decrypt(ct, iv, aad=aad, tag=enctag)\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 657,
      "line_range": [
        657,
        658,
        659,
        660
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "665 \n666         assert dec == pt\n667 \n668         print('dtg:', binascii.hexlify(dectag))\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 666,
      "line_range": [
        666,
        667
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "670 \n671         assert dectag == tag\n672     elif False:\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 671,
      "line_range": [
        671
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "688 \n689         assert enc == ct\n690 \n691         print('etg:', binascii.hexlify(enctag))\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 689,
      "line_range": [
        689,
        690
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "692         print('tag:', binascii.hexlify(tag))\n693         assert enctag == tag\n694     elif False:\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 693,
      "line_range": [
        693
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "701             enc = c.encrypt(data, iv)\n702             assert enc == ct\n703     elif True:\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 702,
      "line_range": [
        702
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "709         enc = c.encrypt(data, iv)\n710         assert enc == ct\n711 \n712         dec = c.decrypt(enc, iv)\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 710,
      "line_range": [
        710,
        711
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "712         dec = c.decrypt(enc, iv)\n713         assert dec == data\n714 \n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptodev.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 713,
      "line_range": [
        713
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "47 def katg(base, glob):\n48     assert os.path.exists(katdir), \"Please 'pkg install nist-kat'\"\n49     if not os.path.exists(os.path.join(katdir, base)):\n",
      "filename": "freebsd\\tests\\sys\\opencrypto\\cryptotest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 48,
      "line_range": [
        48
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "46 import shutil\n47 import subprocess\n48 import sys\n",
      "filename": "freebsd\\tools\\build\\make.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 47,
      "line_range": [
        47
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "54     debug(\"Running\", cmd)\n55     subprocess.check_call(cmd, **kwargs)\n56 \n",
      "filename": "freebsd\\tools\\build\\make.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 55,
      "line_range": [
        55
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "234         # time cleaning directories instead of just doing a rm -rf ${.OBJDIR}\n235         want_clean = input(\"You did not set -DNO_CLEAN/--clean/--no-clean.\"\n236                            \" Did you really mean to do a  clean build? y/[N] \")\n",
      "filename": "freebsd\\tools\\build\\make.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "The input method in Python 2 will read from standard input, evaluate and run the resulting string as python source code. This is similar, though in many ways worse, then using eval. On Python 2, use raw_input instead, input is safe in Python 3.",
      "line_number": 235,
      "line_range": [
        235
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b322-input",
      "test_id": "B322",
      "test_name": "blacklist"
    },
    {
      "code": "246     if parsed_args.debug:\n247         input(\"Press enter to continue...\")\n248     os.chdir(str(source_root))\n",
      "filename": "freebsd\\tools\\build\\make.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "The input method in Python 2 will read from standard input, evaluate and run the resulting string as python source code. This is similar, though in many ways worse, then using eval. On Python 2, use raw_input instead, input is safe in Python 3.",
      "line_number": 247,
      "line_range": [
        247
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b322-input",
      "test_id": "B322",
      "test_name": "blacklist"
    },
    {
      "code": "248     os.chdir(str(source_root))\n249     os.execv(str(bmake_binary), [str(bmake_binary)] + bmake_args)\n",
      "filename": "freebsd\\tools\\build\\make.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Starting a process without a shell.",
      "line_number": 249,
      "line_range": [
        249
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b606_start_process_with_no_shell.html",
      "test_id": "B606",
      "test_name": "start_process_with_no_shell"
    },
    {
      "code": "32 import signal\n33 import subprocess\n34 import time\n",
      "filename": "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 33,
      "line_range": [
        33
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "37     os.remove('results.pcap')\n38 tcpdump = subprocess.Popen('tcpdump -n -i lo0 -w results.pcap icmp', shell=True)\n39 time.sleep(1) # Give tcpdump time to start\n",
      "filename": "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 38,
      "line_range": [
        38
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "37     os.remove('results.pcap')\n38 tcpdump = subprocess.Popen('tcpdump -n -i lo0 -w results.pcap icmp', shell=True)\n39 time.sleep(1) # Give tcpdump time to start\n",
      "filename": "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell",
      "line_number": 38,
      "line_range": [
        38
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
      "test_id": "B602",
      "test_name": "subprocess_popen_with_shell_equals_true"
    },
    {
      "code": "40 \n41 os.system('sysctl net.inet.icmp.icmplim=0')\n42 os.system('ping -q -i .001 -c 100000 127.0.0.1')\n",
      "filename": "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell",
      "line_number": 41,
      "line_range": [
        41
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "40 \n41 os.system('sysctl net.inet.icmp.icmplim=0')\n42 os.system('ping -q -i .001 -c 100000 127.0.0.1')\n",
      "filename": "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 41,
      "line_range": [
        41
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "41 os.system('sysctl net.inet.icmp.icmplim=0')\n42 os.system('ping -q -i .001 -c 100000 127.0.0.1')\n43 \n",
      "filename": "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell",
      "line_number": 42,
      "line_range": [
        42
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "41 os.system('sysctl net.inet.icmp.icmplim=0')\n42 os.system('ping -q -i .001 -c 100000 127.0.0.1')\n43 \n",
      "filename": "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 42,
      "line_range": [
        42
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "46 \n47 os.system('tcpdump -n -v -r results.pcap > results.txt')\n48 \n",
      "filename": "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell",
      "line_number": 47,
      "line_range": [
        47
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "46 \n47 os.system('tcpdump -n -v -r results.pcap > results.txt')\n48 \n",
      "filename": "freebsd\\tools\\regression\\netinet\\ip_id_period\\ip_id_period.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 47,
      "line_range": [
        47
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "144 \t\texcept:\n145 \t\t\tcolor = colors[random.randrange(0, len(colors))]\n146 \t\t\tprint(\"Picking random color\", color, \"for\", name)\n",
      "filename": "freebsd\\tools\\sched\\schedgraph.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 145,
      "line_range": [
        145
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "52 import sys\n53 import subprocess\n54 from subprocess import PIPE\n",
      "filename": "freebsd\\tools\\test\\hwpmc\\pmctest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 53,
      "line_range": [
        53
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "53 import subprocess\n54 from subprocess import PIPE\n55 \n56 # Use input() for Python version 3\n57 if sys.version_info[0] == 3:\n",
      "filename": "freebsd\\tools\\test\\hwpmc\\pmctest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with PIPE module.",
      "line_number": 54,
      "line_range": [
        54,
        55,
        56
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "79         \n80     p = subprocess.Popen([\"pmccontrol\", \"-L\"], stdout=PIPE)\n81     counters = p.communicate()[0]\n",
      "filename": "freebsd\\tools\\test\\hwpmc\\pmctest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 80,
      "line_range": [
        80
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "79         \n80     p = subprocess.Popen([\"pmccontrol\", \"-L\"], stdout=PIPE)\n81     counters = p.communicate()[0]\n",
      "filename": "freebsd\\tools\\test\\hwpmc\\pmctest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 80,
      "line_range": [
        80
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "89             continue\n90         p = subprocess.Popen([\"pmcstat\", \"-p\", counter, options.program],\n91                              stdout=PIPE)\n92         result = p.communicate()[0]\n",
      "filename": "freebsd\\tools\\test\\hwpmc\\pmctest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 90,
      "line_range": [
        90,
        91
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "89             continue\n90         p = subprocess.Popen([\"pmcstat\", \"-p\", counter, options.program],\n91                              stdout=PIPE)\n92         result = p.communicate()[0]\n",
      "filename": "freebsd\\tools\\test\\hwpmc\\pmctest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 90,
      "line_range": [
        90,
        91
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "151         if self.enabled:\n152             assert id in self.items\n153             self.items[id] = obj\n",
      "filename": "freebsd\\tools\\tools\\shlib-compat\\shlib-compat.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 152,
      "line_range": [
        152
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "214     def __init__(self, alias, prefix, offset):\n215         assert alias.startswith(prefix)\n216         self.alias = alias\n",
      "filename": "freebsd\\tools\\tools\\shlib-compat\\shlib-compat.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 215,
      "line_range": [
        215
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "395         t = pp.run(self.type)\n396         assert len(self.subranges) == 1\n397         try:\n",
      "filename": "freebsd\\tools\\tools\\shlib-compat\\shlib-compat.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 396,
      "line_range": [
        396
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "684                         break\n685                 except:\n686                     pass\n",
      "filename": "freebsd\\tools\\tools\\shlib-compat\\shlib-compat.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 685,
      "line_range": [
        685
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "715     def run(self):\n716         fd = os.popen(self.proc, 'r')\n717         while True:\n",
      "filename": "freebsd\\tools\\tools\\shlib-compat\\shlib-compat.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 716,
      "line_range": [
        716
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "875     def parse_argvalue(self, args):\n876         assert args.startswith('<')\n877         i = 1\n",
      "filename": "freebsd\\tools\\tools\\shlib-compat\\shlib-compat.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 876,
      "line_range": [
        876
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "945             if prev.level < tag.level:\n946                 assert prev.level == tag.level - 1\n947                 # TODO check DW_AT_sibling ???\n948                 if tag.tag not in DwarfdumpParser.skip_tags:\n",
      "filename": "freebsd\\tools\\tools\\shlib-compat\\shlib-compat.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 946,
      "line_range": [
        946,
        947
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "951         self.stack.append(tag)\n952         assert len(self.stack) == tag.level\n953 \n",
      "filename": "freebsd\\tools\\tools\\shlib-compat\\shlib-compat.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 952,
      "line_range": [
        952
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "59                 start = time()\n60                 ret = os.system('./{} {} {} {} {}'.format(progname, sort, test, runs, elts))\n61                 total = time() - start\n",
      "filename": "freebsd\\tools\\tools\\sortbench\\bench.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 60,
      "line_range": [
        60
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "70         command += '> {}/{}stats'.format(outdir, test)\n71         os.system(command)\n72 \n",
      "filename": "freebsd\\tools\\tools\\sortbench\\bench.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 71,
      "line_range": [
        71
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "59                 print(fortune, '%')\n60                 if input(\"Remove last fortune? \") == 'y':\n61                     del dups[key]\n",
      "filename": "freebsd\\usr.bin\\fortune\\tools\\do_uniq.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "The input method in Python 2 will read from standard input, evaluate and run the resulting string as python source code. This is similar, though in many ways worse, then using eval. On Python 2, use raw_input instead, input is safe in Python 3.",
      "line_number": 60,
      "line_range": [
        60
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b322-input",
      "test_id": "B322",
      "test_name": "blacklist"
    }
  ]
}